%YAML:1.0

# support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2  

imu_topic: "/ardrone/vi_sensor/imu"
image0_topic: "/ardrone/vi_sensor/left/image_raw"
image1_topic: "/ardrone/vi_sensor/right/image_raw"
output_path: "/home/tong/output/"

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam1_pinhole.yaml"
image_width: 848
image_height: 800
   

# extrinsic parameter between IMU and camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.


# left camera to IMU
body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 0,  0,  1,  0.0,
          -1,  0,  0,  0.032,
           0, -1,  0, -0.005,
           0,  0,  0,  1 ]

# right camera to IMU
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 0,  0,  1,  0.0,
          -1,  0,  0, -0.032,
           0, -1,  0, -0.005,
           0,  0,  0,  1 ]

# multiple thread support
multiple_thread: 1

# feature tracker parameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 32            # min distance between two features 
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy
freq: 25                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic


# optimization parameter
max_num_iterations: 10   # max solver iterations, to guarantee real time
max_solver_time: 0.08    # max solver iteration time (ms), to guarantee real time
keyframe_parallax: 2     # keyframe selection threshold (pixel)

# unsynchronization parameters
estimate_td: 0          # online estimate time offset between camera and imu
td: 0.0                 # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

# IMU parameters      
acc_n: 0.04288          # accelerometer measurement noise standard deviation. 
gyr_n: 0.00712          # gyroscope measurement noise standard deviation.     
acc_w: 0.006            # accelerometer bias random work (walk) noise standard deviation.  
gyr_w: 0.000038785      # gyroscope bias random work (walk) noise standard deviation.     
g_norm: 9.81007         # gravity magnitude

# loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
